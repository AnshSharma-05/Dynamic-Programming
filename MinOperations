
// given a number n. you can perform given operations any number of times find the min steps required to reduce n to 1
/*
operation 1 : if n is divisible by 2 make it n/2
operation 2 : if n is divisible by 3 make it n/3
operation 3: reduce n to n-1
*/

#include<iostream>
#include<vector>
using namespace std;
vector<int> dp(1005,-1);

int MinOperations_rec(int n){
    if(n==1) return 0;
    if(n==2 || n==3) return 1;

    return 1+ min((MinOperations_rec(n-1)),min((n%2==0)?MinOperations_rec(n/2):INT16_MAX,(n%3==0)?MinOperations_rec(n/3):INT16_MAX));
}

int MinOperations_memoized(int n){
    if(n==1) return 0;
    if(n==2 || n==3) return 1;

    if(dp[n]!=-1) return dp[n];
    return dp[n]= 1+ min((MinOperations_memoized(n-1)),min((n%2==0)?MinOperations_memoized(n/2):INT16_MAX,(n%3==0)?MinOperations_memoized(n/3):INT16_MAX));
}

int MinOperations_tabulation(int n){
    dp.clear();
    dp.resize(1005,-1);

    dp[1]=0;
    dp[2]=dp[3]=1;

    for(int i=4;i<=n;i++){
        dp[i]=1+ min((dp[i-1]),min((i%2==0)?dp[i/2]:INT16_MAX,(i%3==0)?dp[i/3]:INT16_MAX));
    }

    return dp[n];

}

int main(){
    int n;
    cin>>n;

    cout<< MinOperations_rec(n)<<endl;
    cout<<MinOperations_memoized(n)<<endl;
    cout<<MinOperations_tabulation(n)<<endl;
    return 0;
}
