#include<iostream>
#include<vector>
using namespace std;

vector<int> dp;

vector<int> get_digits(int n){
    vector<int> result;

    while(n>0){
        if(n%10!=0) result.push_back(n%10);
        n/=10;
    }
    return result;
}

int minimizingCoins_rec(int n){
    if(n==0) return 0;
    if(n<=9) return 1;

    vector<int> d=get_digits(n);
    int result=INT8_MAX;
    for(int i=0;i<d.size();i++){
        result=min(result,minimizingCoins_rec(n-d[0]));
    }

    return 1+result;
}    

    int minimizingcoins_memoized(int n){
        if(n==0) return 0;
        if(n<=9) return 1;

        if(dp[n]!=-1) return dp[n];
        vector<int> d=get_digits(n);
        int result=INT8_MAX;
        
        for(int i=0;i<d.size();i++){
            result=min(result,minimizingcoins_memoized(n-d[0]));
        }
        return dp[n]=1+result;
        
    }

int minimizingcoins_tabulation(int num){
    dp[0]=0;
    for(int i=1;i<=9;i++) dp[i]=1;

    for(int n=10;n<=num;n++){
        vector<int> d=get_digits(n);
        int result= INT8_MAX;
        for(int i=0;i<d.size();i++){
            result=min(result,dp[n-d[i]]);
        }
        dp[n]=1+result;
    }
    return dp[num];
}

int main(){
    int n;
    cin>>n;

    cout<<minimizingCoins_rec(n)<<endl;
    dp.resize(n+5,-1);
    cout<<minimizingcoins_memoized(n)<<endl;
    dp.clear();
    dp.resize(n+1005+1);
    cout<<minimizingcoins_tabulation(n)<<endl;

    return 0;
}
